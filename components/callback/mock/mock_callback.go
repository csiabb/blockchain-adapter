// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/csiabb/blockchain-adapter/components/callback (interfaces: ICallback)

// Package mock_callback is a generated GoMock package.
package mock_callback

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICallback is a mock of ICallback interface
type MockICallback struct {
	ctrl     *gomock.Controller
	recorder *MockICallbackMockRecorder
}

// MockICallbackMockRecorder is the mock recorder for MockICallback
type MockICallbackMockRecorder struct {
	mock *MockICallback
}

// NewMockICallback creates a new mock instance
func NewMockICallback(ctrl *gomock.Controller) *MockICallback {
	mock := &MockICallback{ctrl: ctrl}
	mock.recorder = &MockICallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICallback) EXPECT() *MockICallbackMockRecorder {
	return m.recorder
}

// PushMessage mocks base method
func (m *MockICallback) PushMessage(arg0 []byte, arg1 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "PushMessage", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMessage indicates an expected call of PushMessage
func (mr *MockICallbackMockRecorder) PushMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockICallback)(nil).PushMessage), arg0, arg1)
}
